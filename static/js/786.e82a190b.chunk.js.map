{"version":3,"file":"static/js/786.e82a190b.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","views/ContactsView.js"],"sourcesContent":["import { useState } from 'react';\nimport { CssVarsProvider } from '@mui/joy/styles';\nimport Sheet from '@mui/joy/Sheet';\nimport Typography from '@mui/joy/Typography';\nimport TextField from '@mui/joy/TextField';\nimport Button from '@mui/joy/Button';\nimport { nanoid } from 'nanoid';\nimport {\n  useCreateContactsMutation,\n  useFetchContactsQuery,\n} from '../../redux/contactSlice';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const { data } = useFetchContactsQuery();\n\n  const [createContact] = useCreateContactsMutation();\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        console.warn(`${name} is not processed`);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n\n    const getSameName = name => {\n      return data.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      );\n    };\n\n    getSameName(contact.name)\n      ? alert(`${contact.name} is already in contacts.`)\n      : createContact(contact) && reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <CssVarsProvider\n\n    >\n      <Sheet\n        sx={{\n          minWidth: 280,\n          maxHeight: 280,\n          mx: 'auto',\n          my: 4,\n          py: 3,\n          px: 2,\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 2,\n          borderRadius: 'sm',\n          boxShadow: 'md',\n          mt: '20px',\n          mr: '0px',\n          ml: '0px',\n          pt: '5px',\n        }}\n      >\n        <div>\n          <Typography level=\"h4\" component=\"h1\">\n            <b>Phonebook</b>\n          </Typography>\n          <Typography level=\"body2\">Please, add your contacts</Typography>\n        </div>\n        <form onSubmit={handleSubmit}>\n          <TextField\n            name=\"name\"\n            type=\"text\"\n            value={name}\n            variant=\"solid\"\n            placeholder=\"John Doe\"\n            label=\"Name\"\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n          <TextField\n            name=\"number\"\n            type=\"tel\"\n            variant=\"solid\"\n            placeholder=\"093-111-22-33\"\n            label=\"Number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            sx={{\n              mt: 1,\n              color: '#fff',\n            }}\n          />\n          <Button\n            type=\"submit\"\n            color=\"info\"\n            sx={{\n              mt: 3,\n            }}\n          >\n            Add contacts\n          </Button>\n        </form>\n      </Sheet>\n    </CssVarsProvider>\n  );\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useDeleteContactsMutation } from '../../redux/contactSlice';\nimport Avatar from '@mui/material/Avatar';\n\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItem from '@mui/joy/ListItem';\nimport ListItemContent from '@mui/joy/ListItemContent';\nimport ListItemDecorator from '@mui/joy/ListItemDecorator';\nimport Typography from '@mui/joy/Typography';\nimport ListDivider from '@mui/joy/ListDivider';\n\nconst ContactListItem = ({ id, name, number }) => {\n  const [deleteContact] = useDeleteContactsMutation();\n\n  function stringToColor(string: string) {\n    let hash = 0;\n    let i;\n\n    for (i = 0; i < string.length; i += 1) {\n      hash = string.charCodeAt(i) + ((hash << 5) - hash);\n    }\n\n    let color = '#';\n\n    for (i = 0; i < 3; i += 1) {\n      const value = (hash >> (i * 8)) & 0xff;\n      color += `00${value.toString(16)}`.slice(-2);\n    }\n\n    return color;\n  }\n\n  function stringAvatar(name: string) {\n    return {\n      sx: {\n        bgcolor: stringToColor(name.name),\n      },\n      children: `${name.name.split(' ')[0][0]}`,\n    };\n  }\n\n  return (\n    <>\n      <ListItem\n        sx={{\n          display: 'flex',\n          justifyContent: 'flex-start',\n          alignItems: 'flex-start',\n\n          mt: 0.5,\n        }}\n      >\n        <ListItemDecorator\n          sx={{ alignItems: 'center', justifyContent: 'center', mt: '5px' }}\n        >\n          <Avatar\n            sx={{\n              display: 'flex',\n              justifyContent: 'flex-start',\n              alignItems: 'flex-start',\n            }}\n            {...stringAvatar({ name })}\n          />\n        </ListItemDecorator>\n        <ListItemContent>\n          <Typography\n            sx={{\n              display: 'flex',\n              alignSelf: 'flex-start',\n            }}\n          >\n            {name}:\n          </Typography>\n          <Typography\n            sx={{\n              display: 'flex',\n              alignSelf: 'flex-start',\n            }}\n            level=\"body1\"\n            noWrap\n          >\n            {number}\n          </Typography>\n        </ListItemContent>\n        <IconButton aria-label=\"delete\" onClick={() => deleteContact(id)}>\n          <DeleteIcon />\n        </IconButton>\n      </ListItem>\n      <ListDivider />\n    </>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport ContactListItem from '../ContactListItem/ContactListItem';\n\nimport Typography from '@mui/joy/Typography';\n\nimport Box from '@mui/joy/Box';\nimport { List } from '@mui/material';\n\nimport { useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/filterSlice';\nimport { useFetchContactsQuery } from '../../redux/contactSlice';\n\nconst ContactList = () => {\n  const filter = useSelector(getFilter);\n  const { data } = useFetchContactsQuery();\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    if (data) {\n      return data.filter(contact =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      );\n    }\n  };\n\n  const visibleContacts = getVisibleContacts();\n\n  return (\n    <Box sx={{ minWidth: 300, mt: '20px', pt: '5px' }}>\n      <Typography level=\"h4\" component=\"h1\">\n        <b>Contacts</b>\n      </Typography>\n      <Typography level=\"body2\">Please, find out your contacts</Typography>\n      <List\n        variant=\"outlined\"\n        sx={{\n          minWidth: 240,\n          borderRadius: 'sm',\n          '--List-decorator-width': '70px',\n          '--List-item-paddingTop': '1rem',\n        }}\n      >\n        {data &&\n          visibleContacts.map(({ id, name, number }) => (\n            <ContactListItem key={id} id={id} name={name} number={number} />\n          ))}\n      </List>\n    </Box>\n  );\n};\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Sheet from '@mui/joy/Sheet';\n// import Filter from 'components/Filter/Filter';\n\nexport default function ContactsView() {\n  return (\n    <Sheet\n      sx={{\n        minHeight: 'calc(100vh - 110px)',\n        minWidth: 350,\n        mx: 'auto',\n        my: 2,\n        py: 3,\n        px: 2,\n        display: 'flex',\n        justifyContent: 'space-around',\n\n        gap: 3,\n        borderRadius: 'sm',\n        boxShadow: 'md',\n      }}\n    >\n      <ContactForm />\n      {/* <Filter /> */}\n      <ContactList />\n    </Sheet>\n\n  );\n}\n"],"names":["useState","name","setName","number","setNumber","data","useFetchContactsQuery","useCreateContactsMutation","createContact","handleChange","event","currentTarget","value","console","warn","reset","CssVarsProvider","Sheet","sx","minWidth","maxHeight","mx","my","py","px","display","flexDirection","gap","borderRadius","boxShadow","mt","mr","ml","pt","Typography","level","component","onSubmit","preventDefault","contact","id","nanoid","find","toLowerCase","getSameName","alert","TextField","type","variant","placeholder","label","onChange","pattern","title","required","color","Button","useDeleteContactsMutation","deleteContact","stringToColor","string","i","hash","length","charCodeAt","toString","slice","ListItem","justifyContent","alignItems","ListItemDecorator","Avatar","bgcolor","children","split","stringAvatar","ListItemContent","alignSelf","noWrap","IconButton","onClick","Delete","ListDivider","filter","useSelector","getFilter","visibleContacts","normalizedFilter","includes","getVisibleContacts","Box","List","map","ContactsView","minHeight"],"sourceRoot":""}